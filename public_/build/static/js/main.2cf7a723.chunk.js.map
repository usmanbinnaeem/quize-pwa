{"version":3,"sources":["Components/Title.tsx","Components/Api/API.tsx","Components/Utilities/Utilities.tsx","Components/Questions/QuestionsCard.style.ts","Components/Questions/QuestionsCard.tsx","App.tsx","firebase.js","index.tsx","serviceWorker.ts"],"names":["Title","Difficulty","style","textAlign","fontSize","marginBottom","fetchQuizQuestions","Tqustions","category","difficulty","type","a","endpoint","fetch","json","data","quizQuestions","results","map","question","answers","array","incorrect_answers","correct_answer","sort","Math","random","getCategory","res","trivia_categories","console","log","Wrapper","styled","div","ButtonWrapper","correct","userClicked","QuestionCard","callback","userAnswer","questionNr","totalQuestions","display","flexDirection","alignItems","className","dangerouslySetInnerHTML","__html","answer","key","correctAnswer","disabled","value","onClick","useStyles","makeStyles","theme","root","flexGrow","root1","minWidth","bullet","margin","transform","title","pos","paper","padding","spacing","color","palette","text","secondary","App","percentage","useState","setCategory","categories","setCetogories","Tquestions","setTquestions","qtype","setQtype","qdifficulty","setQdifficulty","questions","setQuestions","number","setNumber","userAnswers","setUserAnswers","score","setScore","gameOver","setGameOver","classes","useEffect","fetchCategory","lecategory","callQuiz","Qquestions","length","CssBaseline","Container","maxWidth","height","paddingTop","onSubmit","e","preventDefault","Grid","container","item","xs","md","lg","width","required","name","onChange","parseInt","target","handleCategory","fontWeight","id","Button","borderRadius","variant","justify","component","Card","CardContent","Typography","gutterBottom","undefined","currentTarget","prev","answerObject","nextQ","firebase","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","messaging","requestPermission","then","getToken","token","ReactDOM","render","StrictMode","document","getElementById","swUrl","process","navigator","serviceWorker","register","result","swDev"],"mappings":"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","file":"static/js/main.2cf7a723.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nfunction Title() {\r\n  return (\r\n    <div style={{ textAlign: \"center\", fontSize: \"60px\", marginBottom: \"0px\" }}>\r\n      <h1>Quiz App</h1>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Title;\r\n","import { shuffleArray } from \"../Utilities/Utilities\";\r\n\r\nexport type Question = {\r\n  category: string;\r\n  correct_answer: string;\r\n  difficulty: string;\r\n  incorrect_answers: string[];\r\n  question: string;\r\n  type: string;\r\n};\r\n\r\nexport type CategoryType = {\r\n  id: number;\r\n  name: string;\r\n};\r\n\r\nexport enum Difficulty {\r\n  EASY = \"easy\",\r\n  MEDIUM = \"medium\",\r\n  HARD = \"hard\",\r\n}\r\n\r\nexport type QuestionState = {\r\n  correct_answer: string;\r\n  answers: string[];\r\n  question: string;\r\n  category: string;\r\n};\r\n\r\nexport const fetchQuizQuestions = async (\r\n  Tqustions: number,\r\n  category: number,\r\n  difficulty: string,\r\n  type: string\r\n): Promise<QuestionState[]> => {\r\n  const endpoint = `https://opentdb.com/api.php?amount=${Tqustions}&difficulty=${difficulty}&type=${type}&category=${category}`;\r\n  const data = await (await fetch(endpoint)).json();\r\n  const quizQuestions: QuestionState[] = data.results.map(\r\n    (question: Question) => {\r\n      return {\r\n        ...question,\r\n        answers: shuffleArray([\r\n          ...question.incorrect_answers,\r\n          question.correct_answer,\r\n        ]),\r\n        category: question.category,\r\n      };\r\n    }\r\n  );\r\n\r\n  return quizQuestions;\r\n};\r\n\r\nexport const getCategory = async (): Promise<CategoryType[]> => {\r\n  const res = await fetch(\"https://opentdb.com/api_category.php\");\r\n  let { trivia_categories } = await res.json();\r\n  console.log(trivia_categories);\r\n  return trivia_categories;\r\n};\r\n","export const shuffleArray = (array: any[]) =>\r\n  [...array].sort(() => Math.random() - 0.5);\r\n","import styled from \"styled-components\";\r\n\r\nexport const Wrapper = styled.div`\r\n  max-width: 1100px;\r\n\r\n  padding: 20px;\r\n\r\n  text-align: center;\r\n\r\n  p {\r\n    font-size: 1rem;\r\n  }\r\n`;\r\n\r\ntype ButtonWrapperProps = {\r\n  correct: boolean;\r\n  userClicked: boolean;\r\n};\r\n\r\nexport const ButtonWrapper = styled.div<ButtonWrapperProps>`\r\n  transition: all 0.3s ease;\r\n\r\n  :hover {\r\n    opacity: 0.8;\r\n  }\r\n\r\n  button {\r\n    cursor: pointer;\r\n    user-select: none;\r\n    font-size: 0.8rem;\r\n    width: 100%;\r\n    height: 40px;\r\n    margin: 5px 0;\r\n    background: ${({ correct, userClicked }) =>\r\n      correct\r\n        ? \"linear-gradient(90deg, #56FFA4, #59BC86)\"\r\n        : !correct && userClicked\r\n        ? \"linear-gradient(90deg, #FF5656, #C16868)\"\r\n        : \"#fff\"};\r\n    color: #000;\r\n  }\r\n`;\r\n","import React from \"react\";\r\n// Types\r\nimport { AnswerObject } from \"../../App\";\r\n// Styles\r\nimport { Wrapper, ButtonWrapper } from \"./QuestionsCard.style\";\r\n\r\ntype Props = {\r\n  question: string;\r\n  answers: string[];\r\n  callback: (e: React.MouseEvent<HTMLButtonElement>) => void;\r\n  userAnswer: AnswerObject | undefined;\r\n  questionNr: number;\r\n  totalQuestions: number;\r\n};\r\n\r\nconst QuestionCard: React.FC<Props> = ({\r\n  question,\r\n  answers,\r\n  callback,\r\n  userAnswer,\r\n  questionNr,\r\n  totalQuestions,\r\n}) => (\r\n  <div\r\n    style={{\r\n      display: \"flex\",\r\n      flexDirection: \"column\",\r\n      alignItems: \"center\",\r\n      marginBottom: \"20px\",\r\n    }}\r\n  >\r\n    <Wrapper>\r\n      <p className=\"number\">\r\n        Question: {questionNr} / {totalQuestions}\r\n      </p>\r\n      <p dangerouslySetInnerHTML={{ __html: question }} />\r\n      <div>\r\n        {answers.map((answer) => (\r\n          <ButtonWrapper\r\n            key={answer}\r\n            correct={userAnswer?.correctAnswer === answer}\r\n            userClicked={userAnswer?.answer === answer}\r\n          >\r\n            <button\r\n              disabled={userAnswer ? true : false}\r\n              value={answer}\r\n              onClick={callback}\r\n            >\r\n              <span dangerouslySetInnerHTML={{ __html: answer }} />\r\n            </button>\r\n          </ButtonWrapper>\r\n        ))}\r\n      </div>\r\n    </Wrapper>\r\n  </div>\r\n);\r\n\r\nexport default QuestionCard;\r\n","import React, { useState, useEffect } from \"react\";\nimport CssBaseline from \"@material-ui/core/CssBaseline\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport Button from \"@material-ui/core/Button\";\nimport Grid from \"@material-ui/core/Grid\";\nimport Container from \"@material-ui/core/Container\";\nimport Title from \"./Components/Title\";\nimport Card from \"@material-ui/core/Card\";\nimport CardContent from \"@material-ui/core/CardContent\";\nimport Typography from \"@material-ui/core/Typography\";\n\nimport { fetchQuizQuestions, getCategory } from \"./Components/Api/API\";\n// Components\nimport QuestionCard from \"./Components/Questions/QuestionsCard\";\n// types\nimport { QuestionState, CategoryType } from \"./Components/Api/API\";\n// Styles\nimport \"./App.css\";\n\nexport type AnswerObject = {\n  question: string;\n  answer: string;\n  correct: boolean;\n  correctAnswer: string;\n};\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    flexGrow: 1,\n  },\n  root1: {\n    minWidth: 275,\n  },\n  bullet: {\n    display: \"inline-block\",\n    margin: \"0 2px\",\n    transform: \"scale(0.8)\",\n  },\n  title: {\n    fontSize: 14,\n  },\n  pos: {\n    marginBottom: 12,\n  },\n  paper: {\n    padding: theme.spacing(2),\n    textAlign: \"center\",\n    color: theme.palette.text.secondary,\n  },\n}));\n\nconst App = () => {\n  let percentage = 0;\n  const [category, setCategory] = useState(0);\n  let [categories, setCetogories] = useState<CategoryType[]>([]);\n  const [Tquestions, setTquestions] = useState(10);\n  const [qtype, setQtype] = useState(\"multiple\");\n  const [qdifficulty, setQdifficulty] = useState(\"\");\n  const [questions, setQuestions] = useState<QuestionState[]>([]);\n  const [number, setNumber] = useState(0);\n  const [userAnswers, setUserAnswers] = useState<AnswerObject[]>([]);\n  const [score, setScore] = useState(0);\n  const [gameOver, setGameOver] = useState(true);\n\n  const classes = useStyles();\n\n  useEffect(() => {\n    const fetchCategory = async () => {\n      const lecategory: CategoryType[] = await getCategory();\n      setCetogories(lecategory);\n    };\n    fetchCategory();\n    console.log(fetchCategory());\n  }, []);\n\n  const callQuiz = async () => {\n    setGameOver(false);\n\n    const Qquestions: QuestionState[] = await fetchQuizQuestions(\n      Tquestions,\n      category,\n      qdifficulty,\n      qtype\n    );\n\n    setQuestions(Qquestions);\n  };\n\n  const handleCategory = (e: React.ChangeEvent<HTMLSelectElement>) => {\n    setCategory(parseInt(e.target.value));\n  };\n\n  if (!questions.length)\n    return (\n      <>\n        <Title />\n\n        <div className={classes.root}>\n          <CssBaseline />\n          <Container maxWidth=\"xl\">\n            <div\n              style={{\n                height: \"100%\",\n                paddingTop: \"5%\",\n              }}\n            >\n              {gameOver && (\n                <form\n                  className=\"initialForm\"\n                  onSubmit={(e) => e.preventDefault()}\n                >\n                  <Grid container spacing={3}>\n                    <Grid item xs={12} md={6} lg={3} className=\"Gcategory\">\n                      <div className=\"category\">\n                        <select\n                          style={{\n                            padding: \"10px\",\n                            width: \"280px\",\n                            margin: \"10px\",\n                          }}\n                          required\n                          name=\"Category\"\n                          onChange={(e) => handleCategory(e)}\n                        >\n                          <option style={{ fontWeight: 500 }} value=\"0\">\n                            Random\n                          </option>\n                          {categories.map((lecategory) => (\n                            <option\n                              style={{ fontWeight: 500 }}\n                              value={lecategory.id}\n                              key={lecategory.id}\n                            >\n                              {lecategory.name}\n                            </option>\n                          ))}\n                        </select>\n                      </div>\n                    </Grid>\n                    <Grid item xs={12} md={6} lg={3} className=\"Gtype\">\n                      <div className=\"type\">\n                        <select\n                          style={{\n                            padding: \"10px\",\n                            width: \"280px\",\n                            margin: \"10px\",\n                          }}\n                          required\n                          name=\"type\"\n                          onChange={(e) => setQtype(e.target.value)}\n                        >\n                          <option value=\"multiple\">Multiple</option>\n                          <option value=\"boolean\">True False</option>\n                        </select>\n                      </div>\n                    </Grid>\n                    <Grid item xs={12} md={6} lg={3} className=\"Gdifficulty\">\n                      <div className=\"difficulty\">\n                        <select\n                          style={{\n                            padding: \"10px\",\n                            width: \"280px\",\n                            margin: \"10px\",\n                          }}\n                          required\n                          name=\"type\"\n                          onChange={(e) => setQdifficulty(e.target.value)}\n                        >\n                          <option value=\"easy\">Easy</option>\n                          <option value=\"medium\">Medium</option>\n                          <option value=\"hard\">Hard</option>\n                        </select>\n                      </div>\n                    </Grid>\n                    <Grid item xs={12} md={6} lg={3} className=\"GTquestions\">\n                      <div className=\"Tquestions\">\n                        <input\n                          style={{\n                            padding: \"10px\",\n                            width: \"280px\",\n                            margin: \"10px\",\n                          }}\n                          type=\"number\"\n                          value={Tquestions}\n                          id=\"textField\"\n                          onChange={(e) =>\n                            setTquestions(parseInt(e.target.value))\n                          }\n                        />\n                      </div>\n                    </Grid>\n                    {gameOver || userAnswers.length === Tquestions ? (\n                      <Button\n                        style={{\n                          margin: \"0px 0px 0px 50%\",\n                          borderRadius: \"0px\",\n                        }}\n                        variant=\"contained\"\n                        color=\"primary\"\n                        className=\"start\"\n                        onClick={() => callQuiz()}\n                      >\n                        Start\n                      </Button>\n                    ) : null}\n                  </Grid>\n                </form>\n              )}\n            </div>\n          </Container>\n        </div>\n      </>\n    );\n\n  const checkAnswer = (e: any) => {\n    if (!gameOver) {\n      const answer = e.currentTarget.value;\n\n      const correct = questions[number].correct_answer === answer;\n\n      if (correct) setScore((prev) => prev + 1);\n\n      const answerObject = {\n        question: questions[number].question,\n        answer,\n        correct,\n        correctAnswer: questions[number].correct_answer,\n      };\n      setUserAnswers((prev) => [...prev, answerObject]);\n    }\n  };\n\n  const handleFinish = () => {\n    setScore(0);\n\n    setQuestions([]);\n    setCategory(0);\n    setQtype(\"multiple\");\n    setUserAnswers([]);\n  };\n\n  const nextQuestion = () => {\n    const nextQ = number + 1;\n\n    if (nextQ === Tquestions) {\n      setGameOver(true);\n    } else {\n      setNumber(nextQ);\n    }\n  };\n\n  return (\n    <>\n      <div className=\"wrapper\">\n        {!gameOver ? (\n          <>\n            <div className=\"container\">\n              <Grid container spacing={3} justify=\"center\">\n                <Grid item xs={12} md={3} component={Card} className=\"card\">\n                  <CardContent>\n                    <Typography color=\"textSecondary\" gutterBottom>\n                      Category: {questions[number].category}\n                    </Typography>\n                  </CardContent>\n                </Grid>\n                <Grid item xs={12} md={3} component={Card} className=\"card\">\n                  <CardContent>\n                    <Typography color=\"textSecondary\" gutterBottom>\n                      Question: {number + 1}/{Tquestions}\n                    </Typography>\n                  </CardContent>\n                </Grid>\n              </Grid>\n            </div>\n          </>\n        ) : null}\n\n        {!gameOver ? (\n          <QuestionCard\n            questionNr={number + 1}\n            totalQuestions={Tquestions}\n            question={questions[number].question}\n            answers={questions[number].answers}\n            userAnswer={userAnswers ? userAnswers[number] : undefined}\n            callback={checkAnswer}\n          ></QuestionCard>\n        ) : null}\n\n        {!gameOver && userAnswers.length === number + 1 && (\n          <Button\n            style={{ margin: \"0px 0px 0px 50%\", borderRadius: \"0px\" }}\n            variant=\"contained\"\n            color=\"primary\"\n            className=\"next\"\n            onClick={nextQuestion}\n          >\n            {userAnswers.length === Tquestions ? \"Finish\" : \"Next Question\"}\n          </Button>\n        )}\n        {gameOver && userAnswers.length === Tquestions && (\n          <div className=\"container\">\n            <Card>\n              <CardContent>\n                <Typography\n                  style={{ marginBottom: \"20px\" }}\n                  variant=\"h6\"\n                  gutterBottom\n                >\n                  Quiz completed.\n                </Typography>\n                <Typography style={{ marginBottom: \"20px\" }} variant=\"h3\">\n                  {(percentage = (score * 100) / Tquestions)}%{\"  \"}\n                  {percentage >= 70 ? \"Congratulations! ðŸš€ \" : \"Soory \"}\n                </Typography>\n                <Typography\n                  style={{ marginBottom: \"20px\" }}\n                  variant=\"h5\"\n                  gutterBottom\n                >\n                  Your Final score is {score}/{Tquestions}\n                </Typography>\n              </CardContent>\n              <Button\n                style={{ margin: \"0px 0px 30px 30%\", borderRadius: \"0px\" }}\n                variant=\"contained\"\n                color=\"secondary\"\n                onClick={() => handleFinish()}\n              >\n                Try Again\n              </Button>\n            </Card>\n          </div>\n        )}\n      </div>\n    </>\n  );\n};\n\nexport default App;\n","import firebase from \"firebase\";\r\n\r\nconst config = {\r\n  apiKey: \"AIzaSyC0D0v4o0VIRSiv4-hIB54hohkd4P3WELo\",\r\n  authDomain: \"quiz-pwa-5457f.firebaseapp.com\",\r\n  databaseURL: \"https://quiz-pwa-5457f.firebaseio.com\",\r\n  projectId: \"quiz-pwa-5457f\",\r\n  storageBucket: \"quiz-pwa-5457f.appspot.com\",\r\n  messagingSenderId: \"695573230638\",\r\n  appId: \"1:695573230638:web:44babb535f730230e1dbbf\",\r\n};\r\n\r\nfirebase.initializeApp(config);\r\n\r\nexport default firebase;\r\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport swDev from \"./serviceWorker\";\nimport firebase from \"./firebase\";\n\nconst messaging = firebase.messaging();\n\nmessaging\n  .requestPermission()\n  .then(() => {\n    return messaging.getToken();\n  })\n  .then((token: any) => {\n    console.log(\"token\", token);\n  });\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nswDev();\n","export default function swDev() {\n  let swUrl = `${process.env.PUBLIC_URL}/serviceWorker.js`;\n  navigator.serviceWorker.register(swUrl).then((result) => console.log(result));\n}\n"],"sourceRoot":""}